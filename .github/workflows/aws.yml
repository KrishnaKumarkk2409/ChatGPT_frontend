name: Deploy React App to EC2

on:
  push:
    branches:
      - main

permissions:
  packages: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for React
        id: meta-react
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}

      - name: Build and push React Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta-react.outputs.tags }}
          labels: ${{ steps.meta-react.outputs.labels }}

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Check if Docker is installed
            if ! command -v docker >/dev/null 2>&1; then
              echo "Docker not installed, installing..."
              sudo apt update
              sudo apt install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
            fi
            # Verify Docker is running
            docker info || (echo "Docker not running" && exit 1)
            # Log in to GHCR
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            # Clean up Docker to ensure space
            docker system prune -a -f
            # Stop and remove any existing react-app container
            docker stop react-app || true
            docker rm react-app || true
            # Pull the latest image
            docker pull ${{ steps.meta-react.outputs.tags }} || (echo "React pull failed" && exit 1)
            # Run the container on port 5174 (adjust to reflect your app's port)
            docker run -d --name react-app -p 5174:5174 ${{ steps.meta-react.outputs.tags }} || (echo "React run failed" && exit 1)

            # Install Nginx if not installed
            if ! command -v nginx >/dev/null 2>&1; then
              echo "Nginx not installed, installing..."
              sudo apt update
              sudo apt install -y nginx
            fi

            # Configure Nginx to run on port 8080 instead of 80
            sudo sed -i 's/listen 80 default_server;/listen 8080;/g' /etc/nginx/sites-available/default
            sudo sed -i 's/listen \[::\]:80 default_server;/listen \[::\]:8080;/g' /etc/nginx/sites-available/default

            # Reload Nginx configuration
            sudo systemctl reload nginx

            # Ensure Nginx is running
            if ! sudo systemctl is-active nginx >/dev/null 2>&1; then
              echo "Nginx is not running, starting it..."
              sudo systemctl start nginx || (echo "Nginx start failed" && exit 1)
            fi

            # Set up Nginx as a reverse proxy to React app running on port 5174
            echo "Setting up Nginx as a reverse proxy to React app on port 5174"
            sudo tee /etc/nginx/sites-available/react-app <<EOF
server {
    listen 8080;

    location / {
        proxy_pass http://localhost:5174;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_cache_bypass \$http_upgrade;
    }
}
EOF

            # Enable and reload Nginx for the new configuration
            sudo ln -s /etc/nginx/sites-available/react-app /etc/nginx/sites-enabled/
            sudo systemctl reload nginx

            echo "Deployment successful"
